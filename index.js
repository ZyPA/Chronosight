const root=document.querySelector(".sockets"),container=document.querySelector(".container"),defaultConfig={root:root};function capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}function createSocketHTML(e){const t=e.root;if(!t)return;const s=document.createElement("button");s.className="socket",s.id=e.id,s.innerHTML=`\n    <div class="socket-header">\n      <img class="socket-icon" width="24px" height="24px" alt="${capitalize(e.id)} icon" src="assets/${e.id}.webp" />\n      <span class="socket-title">${capitalize(e.id)}</span>\n      <span class="socket-status"></span>\n    </div>\n    <span class="socket-value"></span>\n    <div class="socket-footer">\n      <span class="socket-average-label">1h</span>\n      <span class="socket-average"></span>\n    </div>\n  `,t.appendChild(s)}function createSocketSlot(){const e=document.createElement("div");e.className="socket-slot",e.innerHTML='\n    <div class="socket-slot-inner empty" id="socket-slot-inner">\n    </div>\n  ',container&&container.insertBefore(e,root)}function moveSocketToSlot(e){const t=document.getElementById("socket-slot-inner"),s=document.querySelector(".sockets");if(!t||!s)return;const o=s.querySelector(".socket-ghost");o&&s.removeChild(o);const n=t.querySelector(".socket");if(n&&(s.appendChild(n),t.classList.add("empty"),cycleConfigs.forEach((e=>{const t=document.getElementById(e.id);t&&t.parentElement===s&&s.appendChild(t)}))),e){const o=document.getElementById(e);if(o){t.classList.remove("empty"),t.innerHTML="",t.appendChild(o);const n=document.createElement("div");n.className="socket socket-ghost",n.innerHTML="<div class='socket-header'></div><span class='socket-value'></span><div class='socket-footer'></div>";const a=cycleConfigs.findIndex((t=>t.id===e)),c=Array.from(s.querySelectorAll(".socket")).filter((e=>!e.classList.contains("socket-ghost")&&e.parentElement===s));a>=0&&a<c.length?s.insertBefore(n,c[a]):s.appendChild(n)}}}createSocketSlot();class Cycle{config;k;amp;elements;socketed=!1;lastState={};constructor(e){this.config=e,this.k=2*Math.PI/e.period,this.amp=e.amp??15;const t=document.getElementById(e.id);this.elements={root:t,status:t.querySelector(".socket-status"),value:t.querySelector(".socket-value"),average:t.querySelector(".socket-average")},t.addEventListener("click",(()=>this.toggleSocket()))}getEffect(e){const t=e/36e5;return Math.sin(this.k*t)*this.amp}getAverage1H(e){const t=e/36e5,s=t+1;return-this.amp/this.k*(Math.cos(this.k*s)-Math.cos(this.k*t))}update(e,t=!1){const s=this.getEffect(e),o=this.getEffect(e+1),n=this.getAverage1H(e),a=s>0,c=t?"best":a?"positive":"negative",i=n>0?"positive":"negative",l=s<o?"increasing":"decreasing",r="increasing"===l?"▲":"▼",d=`${a?"+":""}${s.toFixed(2)}%`,u=`${n>0?"+":""}${n.toFixed(2)}%`;this.lastState.state!==c&&(this.elements.root.setAttribute("data-state",c),this.lastState.state=c),this.lastState.avgState!==i&&(this.elements.average.setAttribute("data-state",i),this.lastState.avgState=i),this.lastState.value!==d&&(this.elements.value.textContent=d,this.lastState.value=d),this.lastState.average!==u&&(this.elements.average.textContent=u,this.lastState.average=u),this.lastState.status!==l&&(this.elements.status.setAttribute("data-status",l),this.lastState.status=l),this.lastState.statusSymbol!==r&&(this.elements.status.textContent=r,this.lastState.statusSymbol=r)}toggleSocket(){this.socketed?(this.socketed=!1,onSocketChange(null)):onSocketChange(this.config.id)}setSocketed(e){this.socketed=e}}const cycleConfigs=[{...defaultConfig,id:"diamond",period:3},{...defaultConfig,id:"ruby",period:12},{...defaultConfig,id:"jade",period:24}];cycleConfigs.forEach(createSocketHTML);const cycles=Object.fromEntries(cycleConfigs.map((e=>[e.id,new Cycle(e)])));let socketedKey=null;function onSocketChange(e){socketedKey=e;for(const[e,t]of Object.entries(cycles))t.setSocketed(e===socketedKey);moveSocketToSlot(socketedKey)}function getBest(e,t){const s=Object.entries(cycles).map((([t,s])=>{const o=s.getEffect(e),n=s.getAverage1H(e);return o>=0?{key:t,value:o,avg:n}:null})).filter(Boolean);if(!s.length)return"none";const o=s.slice().sort(((e,t)=>t.avg-e.avg))[0];if(t){const e=s.find((e=>e.key==t));if(e&&e.value>=o.value)return t}return o.key}function startRenderLoop(){!function e(){const t=Date.now(),s=getBest(t,socketedKey);for(const[e,o]of Object.entries(cycles))o.update(t,e===s);requestAnimationFrame(e)}()}startRenderLoop();
